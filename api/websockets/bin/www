#!/websocket/bin/env node
// WebSocket Client & Server Implementation for Node.js

// File: websockets/bin/www - a.k.a echo_protocol_server.js
// Date: 8/18/2020
// Note: WebSocket server implementation with 'websocket' NPM

// A server that echos back anything sent to it, whatever utf-8 or binary.
console.log("\nMounting websocket/bin/www (a.k.a echo_protocol_server)...");

var WebSocketServer = require('websocket').server;
var http = require('http');

var server = http.createServer(function(request, response) {
    console.log((new Date()) + ' Received request for ' + request.url);
    response.writeHead(404);
    response.end();
});
server.listen(8080, function() {
    console.log((new Date()) + ' Server is listening on port 8080');
});
 
wsServer = new WebSocketServer({
    httpServer: server,
    // You should not use autoAcceptConnections for production
    // applications, as it defeats all standard cross-origin protection
    // facilities built into the protocol and the browser.  You should
    // *always* verify the connection's origin and decide whether or not
    // to accept it.
    autoAcceptConnections: false
});
 
function originIsAllowed(origin) {
  // put logic here to detect whether the specified origin is allowed.
  return true;
}
 
wsServer.on('request', function(request) {
    if (!originIsAllowed(request.origin)) {
      // Make sure we only accept requests from an allowed origin
      request.reject();
      console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');
      return;
    }
    
    var connection = request.accept('echo-protocol', request.origin);
    console.log((new Date()) + ' Connection accepted.');

    connection.on('message', function(event) {
        if (event.type === 'utf8') {
            console.log('Received Message: ' + event.utf8Data);
            connection.sendUTF(event.utf8Data);
        }
        else if (event.type === 'binary') {
            console.log('Received Binary Message of ' + event.binaryData.length + ' bytes');
            connection.sendBytes(event.binaryData);
        }
    });
    
    connection.on('close', function(reasonCode, description) {
        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');
    });
});

// eof
